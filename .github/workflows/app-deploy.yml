name: App Deployment

on:
  workflow_run:
    workflows: ["Infra Provisioning"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Wait for ECR repo and get URI
        run: |
          for i in {1..10}; do
            REPO_URI=$(aws ecr describe-repositories --repository-names flask-ecr --query "repositories[0].repositoryUri" --output text 2>/dev/null) && break
            echo "Waiting for ECR to be created..."
            sleep 10
          done
          if [ -z "$REPO_URI" ]; then
            echo "ECR repository not found after retries."
            exit 1
          fi
          echo "REPO_URI=$REPO_URI" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t $REPO_URI:latest .
          docker push $REPO_URI:latest

      - name: Register ECS Task and Deploy
        env:
          SUBNET_ID: subnet-xxxxxxxx
          SG_ID: sg-xxxxxxxx
        run: |
          TASK_ROLE=$(aws iam get-role --role-name ecsTaskExecutionRole --query "Role.Arn" --output text)

          cat <<EOF > task-def.json
          {
            "family": "flask-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "$TASK_ROLE",
            "containerDefinitions": [
              {
                "name": "flask-container",
                "image": "$REPO_URI:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 5000,
                    "protocol": "tcp"
                  }
                ]
              }
            ]
          }
                EOF

          aws ecs register-task-definition --cli-input-json file://task-def.json || true

          aws ecs describe-services --cluster flask-cluster --services flask-service --query "services[0].status" --output text || aws ecs create-service \
            --cluster flask-cluster \
            --service-name flask-service \
            --task-definition flask-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SG_ID],assignPublicIp=ENABLED}"
